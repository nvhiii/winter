ctrl + alt + t = terminal

ctrl + x or q to exit

poweroff to turn off vm

/ before = root dir

/ in between dir = separator

. = current dir

.. = parent dir ("one lvl up")

-ls = listing

cd with specified directory = change dir

cd without any args = go to home dir

Use ls --help for help using ls command

Or use man ls for a manual

For built in functions, like cd: do help cd

-l = long listing format

-h = human readable (truncation)

-t = list items based on time of last change

-r = list contents in reverse order

-a = show all (including all hidden files)

~ can be used at beginning of dir to specifiy something location

"cd -" can be used to go back and forth from 2 directories consecutively

Format of a Shell Command:
1. Prompt
2. Command
3. Option (stuff with - or --)
4. Argument

Commands dont always need options or arguments, but they can have multiple of each

- = short option (use in shell to be fast)
-- = long option (use in scripts for clarity)

Options can be called switches or flags, especially if they don't have arguments

-s = size of file

-S = sort files by sizes

-p = allows for multiple creations using mkdir at same time

-R = option for LS to recursively show all listed subdir

nano = text editor in linux, similar to emacs / vim / notepad++ / vscode,
       Syntax:
       nano [name here].txt

       To save ctrl + o, then return to save. ctrl + x to exit to shell

touch = can be used to create blank file in current dir
	Syntax:
	touch [name here].txt

	Just return here

rm = remove specified file
	Syntax:
	rm [name here].[extension here]

	Just return here

	* good practice to do r -i (human interaction guarantee)
	  Answer: Y to remove, N to keep

	^ If this is used when removing entire path, will be prompted to press y or n for each respective file

	^ Only works on files, but can do rm -r -i for dir too

mv = move file to a specified location
	Syntax:
	mv [path]/[fileToMove] [location or name to rename to]

	* works on directories as well
	* good practice to do mv -i (interactive, so you need to confirm before possible overwrite)
	  (mv --interactive)

	  Answer: Y to move, N to keep

cp = copy file to specified location
	Syntax:
	cp [path]/[fileToCopy] [pathToCopyTo]/[nameToCopyAs]

	^ Can do cp -r to copy entire dir, cuz this method is only for files, so need recursion

mkdir = make directory

-i = human (I)nteraction, basically 2-step

-r = recursively

-m = count char

-w = word count

Wildcards:

* = zero or more charas

? = exactly one chara

	^ used almost similarly to loops for repetitive movement of files

wc = word count
	
	^ used to check word count of specified file(s), is shown as a total as the bottom row total

	Syntax:
	wc -l [file with extension here], can use wildcard
	
	^ returns only total # of lines in the file (or files)

	wc -m [file with extension here], can use wildcard

	^ returns only total number of char in file(s)

	wc -w [file with extension here], can use wildcard

	^ returns only total number of words in file(s)

	* If you type wc -[any of the options above], type ctrl + c to exit this state

> = redirect

	Syntax:

	wc -l [wildcard and/or files] > [fileToSendTo].extension

	* Has no screen output, because it goes directly into the file
	** If file doesn't exist, shell auto creates or if it exists, then overwritten


cat = concatenate (join together)

	Syntax:

	cat [filename].txt

	^ prints contents of file, all at once

less = better concatenate

	Syntax:

	less [filename].txt

	^ prints contents of file, page by page
	* Go front = space, back = b, quit = q

sort = sort alphabetically

	Syntax:

	sort [filename].txt

	sort -n [filename].txt

	^ sorts numerically

	** this command doesn't change file, sorts the result to screen instead

-n = numerically

head = gives first n line of the file

	Syntax:

	head -n 1 [filename].txt // first 1 line
				 // -n 20 would be first 20, etc.

>> = appends to file if it already exists

| = pipe, output of left command = input of right

	^ pipes work in unison with filters like so:

	Syntax:

	wc -l *.txt | sort -n | head -n 3 // prints 3 files with least # of lines

	^ here head is the last command, "pipes and filters"

filter = programs like wc, sort, etc that transforms stream of input into output

-d = option to specify a delimiter

	Syntax:

	[prompt] [command] -d [delimiter chara]

-f = option to specify a field in a data file

	Syntax:
	
	[prompt] [command] -f [number of the column] [filename]


cut = command to cut / remove sections of each line in file

	^ lines expected to be separated by a tab chara

uniq = unique keyword
















	


